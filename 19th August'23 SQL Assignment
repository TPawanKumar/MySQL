City-Dataset:https://docs.google.com/spreadsheets/d/1dk9kRwcMxj5USuJqxtITD05S-aOUD6fzNzV
W41dcpgc/edit?usp=sharing



Q1.  Query all columns for all American cities in the CITY table with populations larger than 100000.
     The CountryCode for America is USA.
Ans.  SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 100000;


Q2.  Query the NAME field for all American cities in the CITY table with populations larger than 120000.
     The CountryCode for America is USA.
Ans.  SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000;


Q3.  Query all columns (attributes) for every row in the CITY table.
Ans.  SELECT * FROM CITY;


Q4.  Query all columns for a city in CITY with the ID 1661.
Ans.  SELECT * FROM CITY WHERE ID = 1661; 


Q5.  Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
     JPN.
Ans.  SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN'; 


Q6.  Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
     JPN.
Ans.  SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';



station-table:https://docs.google.com/spreadsheets/d/1sHPhE7walQD5mL7ppFNqybyoOJY3E51N0
cWYzhp2UH4/edit?usp=sharing

Q7.  Query a list of CITY and STATE from the STATION table.
Ans.  SELECT CITY,STATE FROM STATION; 


Q8.  Query a list of CITY names from STATION for cities that have an even ID number. Print the results
     in any order, but exclude duplicates from the answer.
Ans.  SELECT DISTINCT CITY FROM STATION WHERE MOD(ID,2)=0 ORDER BY CITY ASC;


Q9.  Find the difference between the total number of CITY entries in the table and the number of
     distinct CITY entries in the table.
Ans.  SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;


Q10.  Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of               characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered 
      alphabetically.
Ans.   select city, length(city) from station order by length(city) DESC,city ASC fetch first row only;
       select city, length(city) from station order by length(city) asc ,city asc fetch first row only;
    
    
Q11.  Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
      cannot contain duplicates.
Ans.   SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' 
       OR CITY LIKE 'U%' ORDER BY CITY ASC; 
    
    
Q12.  Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
      contain duplicates.
Ans.   SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' 
       OR CITY LIKE '%u'; 
    
    
Q13.  Query the list of CITY names from STATION that do not start with vowels. Your result cannot
      contain duplicates.    
Ans.   SELECT DISTINCT CITY FROM STATION WHERE (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%') AND        (CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u') order by city;     


Q14.  Query the list of CITY names from STATION that do not end with vowels. Your result cannot
      contain duplicates.    
Ans.   SELECT DISTINCT CITY FROM STATION WHERE upper(SUBSTR(CITY,1,1)) NOT IN ('A','E','I','O','U') AND lower(SUBSTR(CITY,1,1)) NOT IN
        ('a','e','i','o','u');         


Q15.  Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain         duplicates.
Ans.   SELECT DISTINCT CITY FROM STATION WHERE UPPER(SUBSTR(CITY, LENGTH(CITY), 1)) NOT IN ('A','E','I','O','U') AND LOWER(SUBSTR(CITY,            LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');


Q16.  Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain               duplicates.
Ans.   SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY, LENGTH(CITY),1))          NOT IN ('a','e','i','o','u');  
 

Q17.  Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and               2019-03-31 inclusive. Return the result table in any order.    
Ans.   SELECT product_id, 
       product_name 
FROM   product 
WHERE  product_id NOT IN (SELECT product_id 
                          FROM   sales 
                          WHERE  sale_date NOT BETWEEN 
                                 '2019-01-01' AND '2019-03-31'); 

select p.product_id, p.product_name
from Product p
left join Sales s
on p.product_id = s.product_id
group by p.product_id
having sum(s.sale_date between '2019-01-01' and '2019-03-31') = count(s.sale_date)  

SELECT product_id, 
       product_name 
FROM   product 
WHERE  product_id NOT IN (SELECT product_id 
                          FROM   sales 
                          WHERE  sale_date NOT BETWEEN 
                                 '2019-01-01' AND '2019-03-31'); 
    

Q18.   Write an SQL query to find all the authors that viewed at least one of their own articles. Return the result table sorted by id in          ascending order.    
Ans.    select author_id as id
from Views
where author_id = viewer_id
group by author_id
order by author_id asc

select distinct author_id as id
from Views
where author_id = viewer_id
order by author_id asc


Q19.   If the customer's preferred delivery date is the same as the order date, then the order is called immediately; otherwise, it is              called scheduled. Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.
Ans.   select round(100*d2.immediate_orders/count(d1.delivery_id), 2) as immediate_percentage
     from Delivery d1,
    (select count(order_date) as immediate_orders
    from Delivery 
    where (order_date = customer_pref_delivery_date)) d2
    
 
Q20.    Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points. Return the result table ordered by ctr in descending         order and by ad_id in ascending order in case of a tie.
Ans.    select ad_id,
ifnull(
    round(
        avg(
            case
                when action = "Clicked" then 1
                when action = "Viewed" then 0
                else null
            end
        ) * 100, 2), 0) as ctr
from Ads
group by ad_id
order by ctr desc, ad_id asc;    


Q21.   Write an SQL query to find the team size of each of the employees. Return result table in any order.
Ans.   select e1.employee_id, count(e2.employee_id) as team_size
from Employee e1
inner join Employee e2 on e1.team_id = e2.team_id
group by e1.employee_id, e2.team_id    


Q22.   Write an SQL query to find the type of weather in each country for November 2019. The type of weather is:
          ● Cold if the average weather_state is less than or equal 15,
          ● Hot if the average weather_state is greater than or equal to 25, and
          ● Warm otherwise.
       Return result table in any order.
Ans.select
 country_name,
 case
 when avg(weather_state) <= 15 then 'Cold'
 when avg(weather_state) >= 25 then 'Hot'
 else 'Warm'
 end as weather_type
from
 Weather as w
 left join
 Countries as c
 on c.country_id = w.country_id
where day between '2019-11-01' and '2019-11-30'
group by w.country_id;   
    
    
Q23.   Write an SQL query to find the average selling price for each product. average_price should be rounded to 2 decimal places. Return          the result table in any order.    
Ans.   SELECT p.product_id,
    ROUND(SUM(p.price*u.units) * 1.0 / SUM(u.units), 2) AS average_price
FROM Prices p JOIN UnitsSold u
ON (p.product_id = u.product_id) AND (u.purchase_date BETWEEN p.start_date AND p.end_date)
GROUP BY p.product_id    


Q24.   Write an SQL query to report the first login date for each player. Return the result table in any order.
Ans.   SELECT p.product_id, ROUND(SUM(p.price*u.units) * 1.0 / SUM(u.units), 2) AS average_price
FROM Prices p JOIN UnitsSold u ON (p.product_id = u.product_id) AND (u.purchase_date BETWEEN p.start_date AND p.end_date)
GROUP BY p.product_id    


Q25.   Write an SQL query to report the device that is first logged in for each player. Return the result table in any order.
Ans.   create table Activity(player_id int, device_id int, event_date date, games_played int);
        insert into Activity values(1,2,'2016-03-01', 5), (1,2,'2016-05-02', 6), (2,3,'2017-06-25', 1),
                                   (3,1,'2016-03-02', 0), (3,4,'2018-07-03', 5);
        create table Result as
          SELECT player_id, min(event_date) AS first_login FROM Activity GROUP BY player_id;
            Select * from Result;


Q26.   Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount. Return result        table in any order.
Ans.   select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100


Q27.   Write an SQL query to find the users who have valid emails. Valid e-mail has a prefix name and a domain where:
            ● The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash                   '-'. The prefix name must start with a letter.
            ● The domain is '@leetcode.com'.
       Return the result table in any order.
Ans.  SELECT * FROM Users
               WHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com')


Q28.   Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and           July 2020. Return the result table in any order.
Ans.   WITH result as (
SELECT 
    o.customer_id,
    c.name,
    DATE_FORMAT(o.order_date, '%Y-%m') as order_date, 
    SUM(quantity * price) as total_spend
FROM Orders as o JOIN Product as p
ON o.product_id = p.product_id
JOIN Customers as c
ON o.customer_id = c.customer_id
GROUP BY 1, 2, 3
ORDER BY 1
)

SELECT
    DISTINCT 
    customer_id,
    name
FROM result 
WHERE customer_id IN (SELECT customer_id FROM result 
		      WHERE order_date = '2020-06' 
                      AND total_spend >= 100)
AND customer_id IN (SELECT customer_id FROM result 
		    WHERE order_date = '2020-07' 
                    AND total_spend >= 100)
                    
WITH result as (
SELECT 
    o.customer_id,
    c.name,
    DATE_FORMAT(o.order_date, '%Y-%m') as order_date, 
    SUM(quantity * price) as total_spend
FROM Orders as o JOIN Product as p
ON o.product_id = p.product_id
JOIN Customers as c
ON o.customer_id = c.customer_id
GROUP BY 1, 2, 3
ORDER BY 1
)
SELECT * FROM result

WITH result as (
SELECT 
    o.customer_id,
    c.name,
    DATE_FORMAT(o.order_date, '%Y-%m') as order_date, 
    SUM(quantity * price) as total_spend
FROM Orders as o JOIN Product as p
ON o.product_id = p.product_id
JOIN Customers as c
ON o.customer_id = c.customer_id
GROUP BY 1, 2, 3
ORDER BY 1
)

SELECT
    DISTINCT 
    customer_id,
    name
FROM result 
WHERE customer_id IN (SELECT customer_id FROM result 
		      WHERE order_date = '2020-06' 
                      AND total_spend >= 100)
AND customer_id IN (SELECT customer_id FROM result 
		    WHERE order_date = '2020-07' 
                    AND total_spend >= 100)
                    
                    
Q29.   Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020. Return the result table in any            order.                    
Ans.   select distinct title
from Content c, TVProgram tv
where c.content_id = tv.content_id
        and Kids_content = 'Y'
        and content_type = 'Movies'
        and program_date between '2020-06-01' and '2020-06-30'


Q30.   Write an SQL query to find the npv of each query of the Queries table. Return the result table in any order.
Ans.   select q.id, q.year, ifnull(n.npv,0) as npv
from queries as q
left join npv as n
on (q.id, q.year) = (n.id, n.year)


Q31.   Write an SQL query to find the npv of each query of the Queries table. Return the result table in any order.
Ans.    select Queries.id, Queries.year, ifnull(npv, 0) as npv
    from Queries left join NPV
    on Queries.id = NPV.id and Queries.year = NPV.year
    order by Queries.id;



Q32.    Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null. Return the result         table in any order.
Ans.     SELECT eu.unique_id, e.name
           FROM Employees e LEFT JOIN EmployeeUNI eu ON e.id = eu.id


Q33.    Write an SQL query to report the distance travelled by each user. Return the result table ordered by travelled_distance in                    descending order, if two or more users travelled the same distance, order them by their name in ascending order.
Ans.    select name, sum(ifnull(distance, 0)) as travelled_distance
from rides r
right join users u
on r.user_id = u.id
group by name
order by 2 desc,1 asc;


Q34.    Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount.
          Return result table in any order.
Ans.    select product_name,
sum( o.unit ) as unit
from products p inner join orders o on p.product_id=o.product_id
where o.order_date>="2020-02-01" and o.order_date<="2020-02-29"
group by p.product_id
having sum(o.unit)>=100;


Q35.    Write an SQL query to:
           ● Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller                    user name.
           ● Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller                    movie name.
Ans.    (select name results
from Users
left join Movie_Rating
using (user_id)
group by user_id
order by count(rating) desc, name
limit 1)

union

(select title
from Movies
left join Movie_Rating
using(movie_id)
where left(created_at,7) = '2020-02'
group by movie_id
order by avg(rating) desc, title
limit 1)


Q36.    Write an SQL query to report the distance travelled by each user. Return the result table ordered by travelled_distance in escending          order, if two or more users travelled the same distance, order them by their name in ascending order.
Ans.    select name, sum(ifnull(distance, 0)) as travelled_distance
from rides r
right join users u
on r.user_id = u.id
group by name
order by 2 desc,1 asc;


Q37.    Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null.
Ans.    select unique_id, name
from Employees
left join EmployeeUNI
on if (Employees.id = EmployeeUNI.id, Employees.id, null)


Q38.    Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exist.
        Return the result table in any order.
Ans.    select id, name from Students where department_id not in (select id from Departments);


Q39.    Write an SQL query to report the number of calls and the total call duration between each pair of distinct persons (person1,                   person2) where person1 < person2. Return the result table in any order.
Ans.    Select 
    if(from_id < to_id, from_id, to_id) as person1, 
    if(from_id > to_id, from_id, to_id) as person2, 
    count(*) as total_calls,
    sum(duration) as total_duration
from 
    Calls
group by 
    person1, person2


Q40.   Write an SQL query to find the average selling price for each product. average_price should be
         rounded to 2 decimal places. Return the result table in any order.
Ans.    SELECT
    p.product_id,
    ROUND(SUM(p.price*u.units) * 1.0 / SUM(u.units), 2) AS average_price
FROM Prices p JOIN UnitsSold u
ON (p.product_id = u.product_id) AND (u.purchase_date BETWEEN p.start_date AND p.end_date)
GROUP BY p.product_id


Q41.    Write an SQL query to report the number of cubic feet of volume the inventory occupies in each warehouse.
        Return the result table in any order
Ans.    select name as warehouse_name, sum(units * vol) as volume
from Warehouse w
join (select product_id, Width*Length*Height as vol
     from Products) p
on w.product_id = p.product_id
group by name


Q42.   Write an SQL query to report the difference between the number of apples and oranges sold each day. Return the result table ordered          by sale_date.
Ans.   select s.sale_date, sum(if(s.fruit = 'apples', s.sold_num, -s.sold_num)) as diff
         from Sales s
           group by s.sale_date


Q43.   Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2        decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting            from their first login date, then divide that number by the total number of players.
Ans.   select round(a_frac.playerCount / count(distinct a_full.player_id), 2) as fraction
from Activity a_full,
    (select count(distinct a1.player_id) as playerCount
    from Activity a1
    inner join
        (select player_id, min(event_date) as first_login
        from Activity 
        group by player_id) a2
    on a1.player_id = a2.player_id and datediff(a1.event_date, a2.first_login) = 1) a_frac


Q44.   Write an SQL query to report the managers with at least five direct reports. Return the result table in any order
Ans.   select Name
from Employee as t1 
join (select ManagerId
    from Employee
    group by ManagerId
    having count(ManagerId) >= 5) as t2
on t1.Id = t2.ManagerId


Q45.   Write an SQL query to report the respective department name and number of students majoring in each department for all departments in        the Department table (even ones with no current students). Return the result table ordered by student_number in descending order. In        case of a tie, order them by dept_name alphabetically
Ans.   SELECT
    d.dept_name,
    COUNT(s.student_id) AS student_number
FROM department AS d 
LEFT JOIN student AS s
ON d.dept_id = s.dept_id
GROUP BY 1
ORDER BY 2 DESC, 1 ASC


Q46.   Write an SQL query to report the customer ids from the Customer table that bought all the products in the Product table.
       Return the result table in any order.
Ans. select customer_id
from Customer
group by customer_id
having count(distinct product_key) = 
    (select count(distinct product_key) from Product)
    
    
Q47.   Write an SQL query that reports the most experienced employees in each project. In case of a tie, report all employees with the              maximum number of experience years. Return the result table in any order.
Ans.   select project_id, employee_id
from Project
join Employee
using (employee_id)
where (project_id, experience_years) in (
    select project_id, max(experience_years)
    from Project
    join Employee
    using (employee_id)
    group by project_id)
    
    
Q48.   Write an SQL query that reports the books that have sold less than 10 copies in the last year, excluding books that have been                available for less than one month from today. Assume today is 2019-06-23.
Ans.   select book_id, name 
from books
where book_id not in (
    select book_id 
    from orders 
    where (dispatch_date between date_sub('2019-06-23',interval 1 year) and '2019-06-23') 
    group by (book_id) 
    having sum(quantity) >= 10)
and 
    available_from < date_sub('2019-06-23', interval 1 month)
    
    
Q49.   Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the           course with the smallest course_id. Return the result table ordered by student_id in ascending order.
Ans.  select e1.student_id, min(e1.course_id) as course_id, e1.grade
from Enrollments e1
where e1.grade = 
    (select max(grade) as max_grade
    from Enrollments e2
    where e1.student_id = e2.student_id) 
group by e1.student_id
order by e1.student_id


Q50.   Write an SQL query to find the winner in each group. Return the result table in any order.
Ans.   select group_id, player_id from (
     select p.group_id, ps.player_id, sum(ps.score) as score
     from Players p,
     (
            select first_player as player_id, first_score as score
            from Matches
            union all
            select second_player, second_score
            from Matches
      ) ps
      where p.player_id = ps.player_id
   group by ps.player_id
  order by group_id, score desc, player_id

) top_scores
group by group_id;    
    
    
    